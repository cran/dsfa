// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dcop_unrot_cpp
Rcpp::NumericMatrix dcop_unrot_cpp(arma::vec u, arma::vec v, arma::vec p, Rcpp::String distr, int deriv_order, List tri, bool logp);
RcppExport SEXP _dsfa_dcop_unrot_cpp(SEXP uSEXP, SEXP vSEXP, SEXP pSEXP, SEXP distrSEXP, SEXP deriv_orderSEXP, SEXP triSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    Rcpp::traits::input_parameter< List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(dcop_unrot_cpp(u, v, p, distr, deriv_order, tri, logp));
    return rcpp_result_gen;
END_RCPP
}
// dcop_cpp
Rcpp::NumericMatrix dcop_cpp(arma::vec u, arma::vec v, arma::vec p, Rcpp::String distr, int rot, int deriv_order, List tri, bool logp);
RcppExport SEXP _dsfa_dcop_cpp(SEXP uSEXP, SEXP vSEXP, SEXP pSEXP, SEXP distrSEXP, SEXP rotSEXP, SEXP deriv_orderSEXP, SEXP triSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< int >::type rot(rotSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    Rcpp::traits::input_parameter< List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(dcop_cpp(u, v, p, distr, rot, deriv_order, tri, logp));
    return rcpp_result_gen;
END_RCPP
}
// chainrule_bi
Rcpp::NumericMatrix chainrule_bi(Rcpp::NumericMatrix f, Rcpp::NumericMatrix g, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_chainrule_bi(SEXP fSEXP, SEXP gSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type g(gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(chainrule_bi(f, g, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// chainrule
Rcpp::NumericMatrix chainrule(Rcpp::List f_list, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_chainrule(SEXP f_listSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type f_list(f_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(chainrule(f_list, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// sumrule_bi
Rcpp::NumericMatrix sumrule_bi(Rcpp::NumericMatrix f, Rcpp:: NumericMatrix g, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_sumrule_bi(SEXP fSEXP, SEXP gSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< Rcpp:: NumericMatrix >::type g(gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(sumrule_bi(f, g, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// sumrule
Rcpp::NumericMatrix sumrule(Rcpp::List f_list, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_sumrule(SEXP f_listSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type f_list(f_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(sumrule(f_list, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// differencerule_bi
Rcpp::NumericMatrix differencerule_bi(Rcpp::NumericMatrix f, Rcpp:: NumericMatrix g, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_differencerule_bi(SEXP fSEXP, SEXP gSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< Rcpp:: NumericMatrix >::type g(gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(differencerule_bi(f, g, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// differencerule
Rcpp::NumericMatrix differencerule(Rcpp::List f_list, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_differencerule(SEXP f_listSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type f_list(f_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(differencerule(f_list, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// productrule_bi
Rcpp::NumericMatrix productrule_bi(Rcpp::NumericMatrix f, Rcpp::NumericMatrix g, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_productrule_bi(SEXP fSEXP, SEXP gSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type g(gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(productrule_bi(f, g, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// productrule
Rcpp::NumericMatrix productrule(Rcpp::List f_list, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_productrule(SEXP f_listSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type f_list(f_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(productrule(f_list, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// quotientrule_bi
Rcpp::NumericMatrix quotientrule_bi(Rcpp::NumericMatrix f, Rcpp:: NumericMatrix g, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_quotientrule_bi(SEXP fSEXP, SEXP gSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< Rcpp:: NumericMatrix >::type g(gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(quotientrule_bi(f, g, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// quotientrule
Rcpp::NumericMatrix quotientrule(Rcpp::List f_list, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_quotientrule(SEXP f_listSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type f_list(f_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(quotientrule(f_list, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// dnormhnorm_cpp
Rcpp::NumericMatrix dnormhnorm_cpp(arma::vec x, arma::vec m, arma::vec v, arma::vec u, int s, int deriv_order, List tri, bool logp);
RcppExport SEXP _dsfa_dnormhnorm_cpp(SEXP xSEXP, SEXP mSEXP, SEXP vSEXP, SEXP uSEXP, SEXP sSEXP, SEXP deriv_orderSEXP, SEXP triSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    Rcpp::traits::input_parameter< List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(dnormhnorm_cpp(x, m, v, u, s, deriv_order, tri, logp));
    return rcpp_result_gen;
END_RCPP
}
// pnormhnorm_cpp
Rcpp::NumericMatrix pnormhnorm_cpp(arma::vec q, arma::vec m, arma::vec v, arma::vec u, int s, int deriv_order, List tri, bool logp);
RcppExport SEXP _dsfa_pnormhnorm_cpp(SEXP qSEXP, SEXP mSEXP, SEXP vSEXP, SEXP uSEXP, SEXP sSEXP, SEXP deriv_orderSEXP, SEXP triSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    Rcpp::traits::input_parameter< List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(pnormhnorm_cpp(q, m, v, u, s, deriv_order, tri, logp));
    return rcpp_result_gen;
END_RCPP
}
// dnormexp_cpp
Rcpp::NumericMatrix dnormexp_cpp(arma::vec x, arma::vec m, arma::vec v, arma::vec u, int s, int deriv_order, List tri, bool logp);
RcppExport SEXP _dsfa_dnormexp_cpp(SEXP xSEXP, SEXP mSEXP, SEXP vSEXP, SEXP uSEXP, SEXP sSEXP, SEXP deriv_orderSEXP, SEXP triSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    Rcpp::traits::input_parameter< List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(dnormexp_cpp(x, m, v, u, s, deriv_order, tri, logp));
    return rcpp_result_gen;
END_RCPP
}
// pnormexp_cpp
Rcpp::NumericMatrix pnormexp_cpp(arma::vec q, arma::vec m, arma::vec v, arma::vec u, int s, int deriv_order, List tri, bool logp);
RcppExport SEXP _dsfa_pnormexp_cpp(SEXP qSEXP, SEXP mSEXP, SEXP vSEXP, SEXP uSEXP, SEXP sSEXP, SEXP deriv_orderSEXP, SEXP triSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    Rcpp::traits::input_parameter< List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(pnormexp_cpp(q, m, v, u, s, deriv_order, tri, logp));
    return rcpp_result_gen;
END_RCPP
}
// dcomper_cpp
Rcpp::NumericMatrix dcomper_cpp(arma::vec x, arma::vec m, arma::vec v, arma::vec u, int s, Rcpp::String distr, int deriv_order, List tri, bool logp);
RcppExport SEXP _dsfa_dcomper_cpp(SEXP xSEXP, SEXP mSEXP, SEXP vSEXP, SEXP uSEXP, SEXP sSEXP, SEXP distrSEXP, SEXP deriv_orderSEXP, SEXP triSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    Rcpp::traits::input_parameter< List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(dcomper_cpp(x, m, v, u, s, distr, deriv_order, tri, logp));
    return rcpp_result_gen;
END_RCPP
}
// pcomper_cpp
Rcpp::NumericMatrix pcomper_cpp(arma::vec q, arma::vec m, arma::vec v, arma::vec u, int s, Rcpp::String distr, int deriv_order, List tri, bool logp);
RcppExport SEXP _dsfa_pcomper_cpp(SEXP qSEXP, SEXP mSEXP, SEXP vSEXP, SEXP uSEXP, SEXP sSEXP, SEXP distrSEXP, SEXP deriv_orderSEXP, SEXP triSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    Rcpp::traits::input_parameter< List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(pcomper_cpp(q, m, v, u, s, distr, deriv_order, tri, logp));
    return rcpp_result_gen;
END_RCPP
}
// dcomper_mv_cpp
NumericMatrix dcomper_mv_cpp(arma::mat x, arma::mat m, arma::mat v, arma::mat u, arma::vec delta, arma::vec s, Rcpp::StringVector distr, int rot, int deriv_order, List tri, bool logp);
RcppExport SEXP _dsfa_dcomper_mv_cpp(SEXP xSEXP, SEXP mSEXP, SEXP vSEXP, SEXP uSEXP, SEXP deltaSEXP, SEXP sSEXP, SEXP distrSEXP, SEXP rotSEXP, SEXP deriv_orderSEXP, SEXP triSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type distr(distrSEXP);
    Rcpp::traits::input_parameter< int >::type rot(rotSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    Rcpp::traits::input_parameter< List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(dcomper_mv_cpp(x, m, v, u, delta, s, distr, rot, deriv_order, tri, logp));
    return rcpp_result_gen;
END_RCPP
}
// ind2joint_bi
Rcpp::NumericMatrix ind2joint_bi(Rcpp::NumericMatrix f, Rcpp:: NumericMatrix g, Rcpp::List tri_f, Rcpp::List tri_g, Rcpp::List tri_h, int deriv_order);
RcppExport SEXP _dsfa_ind2joint_bi(SEXP fSEXP, SEXP gSEXP, SEXP tri_fSEXP, SEXP tri_gSEXP, SEXP tri_hSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< Rcpp:: NumericMatrix >::type g(gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri_f(tri_fSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri_g(tri_gSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri_h(tri_hSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(ind2joint_bi(f, g, tri_f, tri_g, tri_h, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// ind2joint
Rcpp::NumericMatrix ind2joint(Rcpp::List f_list, Rcpp::List tri_f_list, Rcpp::List tri_h_list, int deriv_order);
RcppExport SEXP _dsfa_ind2joint(SEXP f_listSEXP, SEXP tri_f_listSEXP, SEXP tri_h_listSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type f_list(f_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri_f_list(tri_f_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri_h_list(tri_h_listSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(ind2joint(f_list, tri_f_list, tri_h_list, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// transform
Rcpp::NumericMatrix transform(arma::mat x, Rcpp::String type, arma::vec par, int deriv_order);
RcppExport SEXP _dsfa_transform(SEXP xSEXP, SEXP typeSEXP, SEXP parSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(transform(x, type, par, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// derivs_transform
Rcpp::NumericMatrix derivs_transform(Rcpp::NumericMatrix f, Rcpp::String type, arma::vec par, Rcpp::List tri, int deriv_order);
RcppExport SEXP _dsfa_derivs_transform(SEXP fSEXP, SEXP typeSEXP, SEXP parSEXP, SEXP triSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type f(fSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(derivs_transform(f, type, par, tri, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// trind
int trind(Rcpp::List tri, arma::uvec part_deriv_var);
RcppExport SEXP _dsfa_trind(SEXP triSEXP, SEXP part_deriv_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type tri(triSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type part_deriv_var(part_deriv_varSEXP);
    rcpp_result_gen = Rcpp::wrap(trind(tri, part_deriv_var));
    return rcpp_result_gen;
END_RCPP
}
// trind_generator
Rcpp::List trind_generator(int K);
RcppExport SEXP _dsfa_trind_generator(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(trind_generator(K));
    return rcpp_result_gen;
END_RCPP
}
// list2derivs
Rcpp::NumericMatrix list2derivs(Rcpp::List f, int deriv_order);
RcppExport SEXP _dsfa_list2derivs(SEXP fSEXP, SEXP deriv_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type f(fSEXP);
    Rcpp::traits::input_parameter< int >::type deriv_order(deriv_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(list2derivs(f, deriv_order));
    return rcpp_result_gen;
END_RCPP
}
// erfcinv
arma::mat erfcinv(arma::mat x);
RcppExport SEXP _dsfa_erfcinv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(erfcinv(x));
    return rcpp_result_gen;
END_RCPP
}
// OwenT
arma::vec OwenT(arma::vec h, arma::vec a);
RcppExport SEXP _dsfa_OwenT(SEXP hSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(OwenT(h, a));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dsfa_dcop_unrot_cpp", (DL_FUNC) &_dsfa_dcop_unrot_cpp, 7},
    {"_dsfa_dcop_cpp", (DL_FUNC) &_dsfa_dcop_cpp, 8},
    {"_dsfa_chainrule_bi", (DL_FUNC) &_dsfa_chainrule_bi, 4},
    {"_dsfa_chainrule", (DL_FUNC) &_dsfa_chainrule, 3},
    {"_dsfa_sumrule_bi", (DL_FUNC) &_dsfa_sumrule_bi, 4},
    {"_dsfa_sumrule", (DL_FUNC) &_dsfa_sumrule, 3},
    {"_dsfa_differencerule_bi", (DL_FUNC) &_dsfa_differencerule_bi, 4},
    {"_dsfa_differencerule", (DL_FUNC) &_dsfa_differencerule, 3},
    {"_dsfa_productrule_bi", (DL_FUNC) &_dsfa_productrule_bi, 4},
    {"_dsfa_productrule", (DL_FUNC) &_dsfa_productrule, 3},
    {"_dsfa_quotientrule_bi", (DL_FUNC) &_dsfa_quotientrule_bi, 4},
    {"_dsfa_quotientrule", (DL_FUNC) &_dsfa_quotientrule, 3},
    {"_dsfa_dnormhnorm_cpp", (DL_FUNC) &_dsfa_dnormhnorm_cpp, 8},
    {"_dsfa_pnormhnorm_cpp", (DL_FUNC) &_dsfa_pnormhnorm_cpp, 8},
    {"_dsfa_dnormexp_cpp", (DL_FUNC) &_dsfa_dnormexp_cpp, 8},
    {"_dsfa_pnormexp_cpp", (DL_FUNC) &_dsfa_pnormexp_cpp, 8},
    {"_dsfa_dcomper_cpp", (DL_FUNC) &_dsfa_dcomper_cpp, 9},
    {"_dsfa_pcomper_cpp", (DL_FUNC) &_dsfa_pcomper_cpp, 9},
    {"_dsfa_dcomper_mv_cpp", (DL_FUNC) &_dsfa_dcomper_mv_cpp, 11},
    {"_dsfa_ind2joint_bi", (DL_FUNC) &_dsfa_ind2joint_bi, 6},
    {"_dsfa_ind2joint", (DL_FUNC) &_dsfa_ind2joint, 4},
    {"_dsfa_transform", (DL_FUNC) &_dsfa_transform, 4},
    {"_dsfa_derivs_transform", (DL_FUNC) &_dsfa_derivs_transform, 5},
    {"_dsfa_trind", (DL_FUNC) &_dsfa_trind, 2},
    {"_dsfa_trind_generator", (DL_FUNC) &_dsfa_trind_generator, 1},
    {"_dsfa_list2derivs", (DL_FUNC) &_dsfa_list2derivs, 2},
    {"_dsfa_erfcinv", (DL_FUNC) &_dsfa_erfcinv, 1},
    {"_dsfa_OwenT", (DL_FUNC) &_dsfa_OwenT, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_dsfa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
